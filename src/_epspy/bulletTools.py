## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import bulletBase as bBase;
import _epspy.bulletBase as bBase
# (Line 3) function shootL(player, unitType, speed, row) {
@EUDFunc
def f_shootL(player, unitType, speed, row):
    # (Line 4) const x0, x1, y = 512, 2048 - 512, 768 + 64 * (row - 1);
    x0, x1, y = List2Assignable([512, 2048 - 512, 768 + 64 * (row - 1)])
    # (Line 5) bBase.shoot(player, unitType, speed, x0, y, x1, y);
    # (Line 6) }
    bBase.f_shoot(player, unitType, speed, x0, y, x1, y)
    # (Line 8) function shootR(player, unitType, speed, row) {

@EUDFunc
def f_shootR(player, unitType, speed, row):
    # (Line 9) const x1, x0, y = 512, 2048 - 512, 768 + 64 * (row - 1);
    x1, x0, y = List2Assignable([512, 2048 - 512, 768 + 64 * (row - 1)])
    # (Line 10) bBase.shoot(player, unitType, speed, x0, y, x1, y);
    # (Line 11) }
    bBase.f_shoot(player, unitType, speed, x0, y, x1, y)
    # (Line 13) function shootU(player, unitType, speed, row) {

@EUDFunc
def f_shootU(player, unitType, speed, row):
    # (Line 14) const y0, y1, x = 512, 2048 - 512, 768 + 64 * (row - 1);
    y0, y1, x = List2Assignable([512, 2048 - 512, 768 + 64 * (row - 1)])
    # (Line 15) bBase.shoot(player, unitType, speed, x, y0, x, y1);
    # (Line 16) }
    bBase.f_shoot(player, unitType, speed, x, y0, x, y1)
    # (Line 18) function shootD(player, unitType, speed, row) {

@EUDFunc
def f_shootD(player, unitType, speed, row):
    # (Line 19) const y1, y0, x = 512, 2048 - 512, 768 + 64 * (row - 1);
    y1, y0, x = List2Assignable([512, 2048 - 512, 768 + 64 * (row - 1)])
    # (Line 20) bBase.shoot(player, unitType, speed, x, y0, x, y1);
    # (Line 21) }
    bBase.f_shoot(player, unitType, speed, x, y0, x, y1)
