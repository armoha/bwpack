import stages.py_timeline;

import stages.pattern01;
import stages.pattern02;
import stages.pattern02_var;
import stages.pattern03;

import player.lifesys as lSys;

const stagesFuncs = [
    pattern02.funcs,  // Basic tutorial
    pattern03.funcs,
    pattern02_var.funcs,  // Basic tutorial 2
    pattern01.funcs,  // Thing
    0
];

////////////////////////////////

var currentStage = 0;
const currentStageProc = EUDFuncPtr(0, 0)();
var isGameCompleted = 0;

function nextStage() {
    if(isGameCompleted) return;
    const stageFuncs = stagesFuncs[currentStage];
    currentStage++;
    if(stageFuncs == 0) {
        isGameCompleted = 1;
        return;
    }

    KillUnit('(any unit)', Force2);
    RemoveUnit('Avoider', Force1);
    lSys.createPlayers();

    const stageFunc2 = EUDArray(stageFuncs);
    const stageName, stageStarter, stageProc =
        DBString(stageFunc2[0]),
        EUDFuncPtr(0, 0)(stageFunc2[1]),
        EUDFuncPtr(0, 0)(stageFunc2[2]);

    SetCurrentPlayer(getuserplayerid());

    const buffer = DBString(50);
    const k1 = dbstr_print(buffer, "\x0F#", currentStage, ". \x04");
    dbstr_addstr(k1, stageName.GetStringMemoryAddr());
    DoActions(buffer.GetDisplayAction());
    EUDFuncPtr(0, 0)(stageStarter)();
    currentStageProc.setFunc(stageProc);
}

function gameCompleteProc();

function runStageProc() {
    // Staging
    if(currentStage == 0 || Bring(Force1, AtLeast, 1, 'Avoider', 'stageEnd')) {
        nextStage();
    }
    if(isGameCompleted) {
        gameCompleteProc();
        return;
    }
    (currentStageProc)();
}

function gameCompleteProc() {

}
