## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import stages.py_timeline;
import stages.timeline as timeline
# (Line 3) import stages.pattern01;
import stages._epspy.pattern01 as pattern01
# (Line 5) const stagesFuncs = [
# (Line 6) pattern01.funcs,
# (Line 7) 0
# (Line 8) ];
stagesFuncs = EUDArray(FlattenList([pattern01.funcs, 0]))
# (Line 12) var currentStage = 0;
currentStage = EUDVariable(0)
# (Line 13) const currentStageProc = EUDFuncPtr(0, 0)();
currentStageProc = EUDFuncPtr(0, 0)()
# (Line 14) var isGameCompleted = 0;
isGameCompleted = EUDVariable(0)
# (Line 16) function nextStage() {
@EUDFunc
def f_nextStage():
    # (Line 17) if(isGameCompleted) return;
    if EUDIf()(isGameCompleted):
        EUDReturn()
        # (Line 18) const stageFuncs = stagesFuncs[currentStage];
    EUDEndIf()
    stageFuncs = stagesFuncs[currentStage]
    # (Line 19) currentStage++;
    currentStage.__iadd__(1)
    # (Line 20) if(stageFuncs == 0) {
    if EUDIf()(stageFuncs == 0):
        # (Line 21) isGameCompleted = 1;
        isGameCompleted << (1)
        # (Line 22) return;
        EUDReturn()
        # (Line 23) }
        # (Line 25) KillUnitAt(All, "(any unit)", "stageMain", Force2);
    EUDEndIf()
    # (Line 27) const stageFunc2 = EUDArray(stageFuncs);
    DoActions(KillUnitAt(All, "(any unit)", "stageMain", Force2))
    stageFunc2 = EUDArray(stageFuncs)
    # (Line 28) const stageStarter, stageProc =
    # (Line 29) EUDFuncPtr(0, 0)(stageFunc2[0]),
    # (Line 30) EUDFuncPtr(0, 0)(stageFunc2[1]);
    stageStarter, stageProc = List2Assignable([EUDFuncPtr(0, 0)(stageFunc2[0]), EUDFuncPtr(0, 0)(stageFunc2[1])])
    # (Line 32) EUDFuncPtr(0, 0)(stageStarter)();
    # (Line 33) currentStageProc.setFunc(stageProc);
    EUDFuncPtr(0, 0)(stageStarter)()
    # (Line 34) }
    currentStageProc.setFunc(stageProc)
    # (Line 36) function gameCompleteProc();

# (Line 38) function runStageProc() {
@EUDFunc
def f_runStageProc():
    # (Line 40) if(currentStage == 0 || Bring(Force1, AtLeast, 1, 'Avoider', 'stageEnd')) {
    if EUDIf()(EUDOr(currentStage == 0, Bring(Force1, AtLeast, 1, 'Avoider', 'stageEnd'))):
        # (Line 41) nextStage();
        # (Line 42) }
        f_nextStage()
        # (Line 43) if(isGameCompleted) {
    EUDEndIf()
    if EUDIf()(isGameCompleted):
        # (Line 44) gameCompleteProc();
        # (Line 45) return;
        f_gameCompleteProc()
        EUDReturn()
        # (Line 46) }
        # (Line 47) (currentStageProc)();
    EUDEndIf()
    # (Line 48) }
    (currentStageProc)()
    # (Line 50) function gameCompleteProc() {

@EUDFunc
def f_gameCompleteProc():
    # (Line 52) }
    pass
