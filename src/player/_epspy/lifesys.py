## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import location as loc;
import _epspy.location as loc
# (Line 6) function regeneratePlayer(player) {
@EUDFunc
def f_regeneratePlayer(player):
    # (Line 8) if(!Command(player, AtLeast, 1, "Avoider")) {
    if EUDIf()(Command(player, AtLeast, 1, "Avoider"), neg=True):
        # (Line 9) if(Accumulate(player, AtLeast, 1, Ore)) {
        if EUDIf()(Accumulate(player, AtLeast, 1, Ore)):
            # (Line 10) SetResources(player, Subtract, 1, Ore);
            # (Line 11) const regenX, regenY = loc.playerRegen(player);
            DoActions(SetResources(player, Subtract, 1, Ore))
            regenX, regenY = List2Assignable([loc.f_playerRegen(player)])
            # (Line 12) loc.moveLocationPx($L("pRegen"), regenX, regenY);
            _t4 = loc.f_moveLocationPx(GetLocationIndex("pRegen"), regenX, regenY)
            # (Line 13) CreateUnit(1, "Avoider", "pRegen", player);
            _t4
            # (Line 14) }
            DoActions(CreateUnit(1, "Avoider", "pRegen", player))
            # (Line 15) }
        EUDEndIf()
        # (Line 16) }
    EUDEndIf()
    # (Line 19) function isPlayerAlive(player) {

@EUDFunc
def f_isPlayerAlive(player):
    # (Line 20) return l2v(Command(player, AtLeast, 1, "Avoider"));
    EUDReturn(_L2V(Command(player, AtLeast, 1, "Avoider")))
    # (Line 21) }
    # (Line 24) function addLife(player, life) {

@EUDFunc
def f_addLife(player, life):
    # (Line 25) SetResources(player, Add, life, Ore);
    # (Line 26) }
    DoActions(SetResources(player, Add, life, Ore))
