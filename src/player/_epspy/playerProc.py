## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName
    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

class _ARRW:
     def __init__(self, obj, index):
         self.obj = obj
         self.index = index
     def __lshift__(self, r):
         self.obj[self.index] = r

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _MVAR(vs):
    return List2Assignable([
        v if IsEUDVariable(v) else EUDVariable() << v
        for v in FlattenList(vs)])

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import player.playerType as pType;
import player._epspy.playerType as pType
# (Line 2) import player.lifesys;
import player._epspy.lifesys as lifesys
# (Line 5) function collisionCheck(player, epd);
# (Line 11) function processPlayerCUnit(player, unitptr, unitepd) {
@EUDFunc
def f_processPlayerCUnit(player, unitptr, unitepd):
    # (Line 12) MoveLocation('pTrace', 'Avoider', player, 'Anywhere');
    # (Line 15) pType.applyUnitTypeChange(player, unitepd);
    DoActions(MoveLocation('pTrace', 'Avoider', player, 'Anywhere'))
    # (Line 16) pType.applyUnitTypeColor(player, unitepd);
    pType.f_applyUnitTypeChange(player, unitepd)
    # (Line 18) dwwrite(unitptr + 0x34, 10240);
    pType.f_applyUnitTypeColor(player, unitepd)
    # (Line 19) wwrite(unitptr + 0x48, 67);
    f_dwwrite(unitptr + 0x34, 10240)
    # (Line 20) bwrite(unitptr + 0x22, 40);
    f_wwrite(unitptr + 0x48, 67)
    # (Line 23) if(collisionCheck(player, unitepd)) {
    f_bwrite(unitptr + 0x22, 40)
    if EUDIf()(f_collisionCheck(player, unitepd)):
        # (Line 24) CreateUnit(1, 'HitEffect', 'pTrace', P7);
        # (Line 25) GiveUnits(All, 'HitEffect', P7, 'Anywhere', P9);
        # (Line 26) KillUnit('HitEffect', P9);
        # (Line 27) KillUnit('Avoider', player);
        # (Line 28) return;
        DoActions([
            CreateUnit(1, 'HitEffect', 'pTrace', P7),
            GiveUnits(All, 'HitEffect', P7, 'Anywhere', P9),
            KillUnit('HitEffect', P9),
            KillUnit('Avoider', player)
        ])
        EUDReturn()
        # (Line 29) }
        # (Line 30) }
    EUDEndIf()
    # (Line 36) function regeneratePlayers() {

@EUDFunc
def f_regeneratePlayers():
    # (Line 37) for(var player = $P1 ; player <= $P6; player++) {
    player = EUDVariable()
    player << (0)
    if EUDWhile()(player <= 5):
        def _t2():
            player.__iadd__(1)
        # (Line 38) if(playerexist(player)) {
        if EUDIf()(f_playerexist(player)):
            # (Line 39) lifesys.regeneratePlayer(player);
            # (Line 40) }
            lifesys.f_regeneratePlayer(player)
            # (Line 41) }
        EUDEndIf()
        # (Line 42) }
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    # (Line 52) function collisionCheck(player, epd) {

@EUDFunc
def f_collisionCheck(player, epd):
    # (Line 53) const unitType = pType.getCurrentUnitType(epd);
    unitType = pType.f_getCurrentUnitType(epd)
    # (Line 54) if(!Bring(player, AtLeast, 1, '(men)', 'stageMain')) return 0;
    if EUDIf()(Bring(player, AtLeast, 1, '(men)', 'stageMain'), neg=True):
        EUDReturn(0)
        # (Line 55) else if(unitType == 1 && Bring(P7, AtLeast, 1, '(men)', 'pTrace')) return 1;
    if EUDElseIf()([unitType == 1, Bring(P7, AtLeast, 1, '(men)', 'pTrace')]):
        EUDReturn(1)
        # (Line 56) else if(unitType == 2 && Bring(P8, AtLeast, 1, '(men)', 'pTrace')) return 1;
    if EUDElseIf()([unitType == 2, Bring(P8, AtLeast, 1, '(men)', 'pTrace')]):
        EUDReturn(1)
        # (Line 57) else return 0;
    if EUDElse()():
        EUDReturn(0)
        # (Line 58) }
    EUDEndIf()
