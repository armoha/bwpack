import player.py_keystate;
import location as loc;
import bulletBase as bBase;

function QueueGameCommand_Select(n, _array) {
    const array = EUDArray(_array);
    const bw = EUDByteWriter();
    const buffer = Db(b'\x090123456789012345678901234');
    bw.seekoffset(buffer + 1);
    bw.writebyte(n);

    for(var i = 0 ; i < n ; i++) {
        const unitptr = array[i];
        const unitIndex = (unitptr - 0x59CCA8) / 336 + 1;
        const uniquenessIdentifier = bread(unitptr + 0xA5);
        const targetID = unitIndex | (uniquenessIdentifier << 11);
        const b0, b1 = dwbreak(targetID)[[2, 3]];
        bw.writebyte(b0);
        bw.writebyte(b1);
    }
    bw.flushdword();
    QueueGameCommand(buffer, 2 * (n + 1));
}


const mainKeyState = keystate.KeyState('w', 's', 'a', 'd');
const joystickPtr = [0, 0, 0, 0, 0, 0];

function createJoystick(player) {
    const joyX, joyY = loc.playerJoystick(player);
    loc.moveLocationPx($L("pJoystick"), joyX, joyY);
    const ptr, epd = bBase.getNextGeneratedUnit();
    if(ptr != 0) {
        CreateUnit(1, "Joystick", "pJoystick", player);
        bBase.makeUnitStackable(epd);
        joystickPtr[player] = ptr;
    }
}

function createJoysticks() {
    for(var player = $P1 ; player <= $P6; player++) {
        if(playerexist(player)) {
            createJoystick(player);
        }
    }
}

function sendJoystickCommand(player, unitptr, unitepd) {
    // Key input
    if(player == getuserplayerid() && Memory(0x6284B8, Exactly, unitptr)) {
        // If selected unit is avoider unit -> Process keys
        var dx, dy = 1, 1;
        if(mainKeyState.currentlyKeyDown('w')) dy--;
        if(mainKeyState.currentlyKeyDown('s')) dy++;
        if(mainKeyState.currentlyKeyDown('a')) dx--;
        if(mainKeyState.currentlyKeyDown('d')) dx++;
        const dstX = 800 + dx * 123;
        const dstY = 800 + dy * 357;

        const selbuf0 = [0];
        selbuf0[0] = joystickPtr[player];
        QueueGameCommand_Select(1, selbuf0);
        QueueGameCommand_RightClick(dstY * 0x10000 + dstX);

        var prevSelectionCount = 0;
        const prevSelections = EUDArray(12);
        for(prevSelectionCount = 0 ; prevSelectionCount < 12 ; prevSelectionCount++) {
            const selData = dwread_epd(EPD(0x6284B8) + prevSelectionCount);
            if(selData == 0) break;
            prevSelections[prevSelectionCount] = selData;
        }
        QueueGameCommand_Select(prevSelectionCount, prevSelections);
    }
}

function procJoystick(player, unitepd) {
    // Interpret key
    const dstX, dstY = dwbreak(dwread_epd(unitepd + (0x58 / 4)))[[0, 1]];
    const xq, xr = div(dstX - 800, 123);
    const yq, yr = div(dstY - 800, 357);
    if(xr == 0 && yr == 0 && xq <= 2 && yq <= 2) {
        const pMoveDst = $L('pMoveDst');
        MoveLocation('pMoveDst', 'Avoider', player, 'Anywhere');
        const px, py = loc.getLocationTL(pMoveDst);
        const dx, dy = xq - 1, yq - 1;
        const stepDelta = 32;
        const dstX, dstY = px + stepDelta * dx, py + stepDelta * dy;
        loc.moveLocationPx($L('pMoveDst'), dstX, dstY);
        Order('Avoider', player, 'Anywhere', Move, 'pMoveDst');
    }

    const joyX, joyY = loc.playerJoystick(player);
    loc.moveLocationPx($L("pJoystick"), joyX, joyY);
    MoveUnit(All, 'Joystick', player, 'Anywhere', 'pJoystick');
    Order('Joystick', player, 'pJoystick', Move, 'pJoystick');
}
