import bulletBase as bBase;


function getTilesPositionX(tx) {
    return 704 + 64 * tx;
}

function getTilesPositionY(ty) {
    return 704 + 64 * ty;    
}

function getTilesPosition(tx, ty) {
    return 704 + 64 * tx, 704 + 64 * ty;    
}

///////////////////////////////////////////////////////////////////////////////

function shootTiled(player, unitType, speed, tx0, ty0, tx1, ty1) {
    const x0, y0 = getTilesPosition(tx0, ty0);
    const x1, y1 = getTilesPosition(tx1, ty1);
    return bBase.shoot(player, unitType, speed, x0, y0, x1, y1);
}

function shootLTiled(player, unitType, speed, row) {
    return shootTiled(player, unitType, speed, -3, row, 13, row);
}

function shootRTiled(player, unitType, speed, row) {
    return shootTiled(player, unitType, speed, 13, row, -3, row);
}

function shootUTiled(player, unitType, speed, col) {
    return shootTiled(player, unitType, speed, col, -3, col, 13);
}

function shootDTiled(player, unitType, speed, col) {
    return shootTiled(player, unitType, speed, col, 13, col, -3);
}

///////////////////////////////////////////////////////////////////////////////

function place(player, unitType, x, y) {
    const ptr, epd = bBase.createBullet(player, unitType, 1, x, y);
    SetMemoryEPD(epd + (0x4C / 4), SetTo, player + 0x00006B00);
    return ptr, epd;
}

function placeTiled(player, unitType, tx, ty) {
    const x, y = getTilesPosition(tx, ty);
    return place(player, unitType, x, y);
}

///////////////////////////////////////////////////////////////////////////////

function getInfiniteVectorEnd(x, y, dx, dy) {
    const mapSize = 32 * 64;

    // Get time to arrive at the vertical edge of the map
    var timeX, timeY;
    if(dx >= 0x80000000) timeX = 2048 * x / -dx;
    else timeX = 2048 * (mapSize - x) / dx;
    if(dy >= 0x80000000) timeY = 2048 * y / -dy;
    else timeY = 2048 * (mapSize - y) / dy;

    // Get time for the missile to get to the edge
    var time;  // min(timeX, timeY)
    if(dx == 0) time = timeY;
    else if(dy == 0) time = timeX;
    else if(timeX <= timeY) time = timeX;
    else time = timeY;

    // Calculate final position
    var dstx, dsty;
    if(dx >= 0x80000000) dstx = x - (-dx * time / 2048);
    else dstx = x + (dx * time / 2048);
    if(dy >= 0x80000000) dsty = y - (-dy * time / 2048);
    else dsty = y + (dy * time / 2048);
    return dstx, dsty;
}

function orderAngle(player, unitepd, angle) {
    if(unitepd) {
        const srcx, srcy = dwbreak(dwread_epd(unitepd + (0x28 / 4)))[[0, 1]];
        const dx, dy = lengthdir(1024, angle);
        const dstx, dsty = getInfiniteVectorEnd(srcx, srcy, dx, dy);
        bBase.orderBullet(player, unitepd, dstx, dsty);
    }
}

function shootAngle(player, unitType, speed, srcx, srcy, angle) {
    const dx, dy = lengthdir(1024, angle);
    const dstx, dsty = getInfiniteVectorEnd(srcx, srcy, dx, dy);
    return bBase.shoot(player, unitType, speed, srcx, srcy, dstx, dsty);
}

function shootAngleTiled(player, unitType, speed, tx, ty, angle) {
    const srcx, srcy = getTilesPosition(tx, ty);
    return shootAngle(player, unitType, speed, srcx, srcy, angle);
}



function shootCircular(player, unitType, speed, x, y, startAngle, n) {
    const q, r = div(360, n);
    var angle, rangle = startAngle, 0;
    for(var i = 1 ; i <= n ; i++) {
        shootAngle(player, unitType, speed, x, y, angle);
        angle += q;
        rangle += r;
        if(rangle > n) {
            rangle -= n;
            angle++;
        }
    }
}

function shootCircularTiled(player, unitType, speed, tx, ty, startAngle, n) {
    const x, y = getTilesPosition(tx, ty);
    shootCircular(player, unitType, speed, x, y, startAngle, n);
}
